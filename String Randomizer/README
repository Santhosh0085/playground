Exercise 1:
Write 2 functions (each with a different implementation) which accept a string and return a string containing the same characters as the input string -- but in a random order. Compare these implementations and describe why you might prefer one implementation over another (and under what circumstances). One of the implementations should use the System.Random type and its Next(int minValue, int maxValue) overload, while the other implementation isn't constrained to System.Random usage.

Implementations: 
Random API:
This is based on the first requirement. This implementation uses the C# Random API to generate random numbers between min and max values.

RNGCryptoServiceProvider API:
This implementation uses the RNGCryptoServiceProvider API to generate random numbers between min and max values.

My take on it: I would prefer the RNGCryptoServiceProvider as it is more secure than the Random API. Some of the advantages of using Crypto API:
1) Random API uses the internal computer system clock to generate random numbers. This is very easily hackable, since parallel requests to get random numbers on the same clock time will return the same random sequence of numbers. 
2) Since Random API relies on system clock, the randomness is not good enough and not purely random.
3) If we are creating very high volumne of numbers then RNGCryptoServiceProvider will ensure proper uniqueness since it used the cryptographic service provide (CSP).


APIs:
1) Run the "String Randomizer" executable to choose between the 2 APIs and randomize strings.
2) "StrRandomizerTest" has the necessary test cases to test the 2 APIs.
